name: Node.js CI

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm install

      - name: Run Tests
        if: contains(github.event.head_commit.message, '[run-tests]')
        run: npm test

      # - name: Add database
      #   run: echo "MONGO_URL=${{ secrets.MONGO_URL }} >> .env"

      - name: Setup Environment Variables
        run: echo "SITE_URL=${{ secrets.SITE_URL }}" >> .env

      # - name: Check Terraform Version
      #   run: terraform --version

      # - name: Init Terraform
      #   run: terraform init

      # - name: Set Environment Variables
      #   run: export TF_VAR_private_key_path="C:/Users/HP/Downloads/ec2-1(1).pem"

      # - name: Apply Terraform
      #   run: terraform apply -auto-approve

      - name: Build Docker Image
        run: docker build -t arvindaffan/fppso .

      - name: Login to Docker Hub
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

      - name: Publish Image to Docker Hub
        run: docker push arvindaffan/fppso:latest

  testing:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm install

      - name: Run Tests
        if: contains(github.event.head_commit.message, '[run-tests]')
        run: npm test

  deploy:
    needs: [build, testing]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source
        uses: actions/checkout@v4

     - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
         terraform_version: 1.8.5
         terraform_wrapper: false

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.TF_USER_AWS_KEY }}
          aws-secret-access-key: ${{ secrets.TF_USER_AWS_SECRET }}
          aws-region: ap-southeast-1

      - name: Initialize Terraform
        id: init
        run: terraform init

      - name: Terraform Plan
        id: plan
        run: terraform plan -out=plan.out

      - name: Terraform Apply
        run: terraform apply plan.out
        env:
          TF_VAR_access_key: ${{ secrets.TF_USER_AWS_KEY }}
          TF_VAR_secret_key: ${{ secrets.TF_USER_AWS_SECRET }}

      - name: Wait for instance to settle
        run: sleep 30

      - name: Get Instance IP
        id: instance_ip
        run: |
          INSTANCE_IP=$(terraform output -raw instance_ip)
          echo "::set-output name=instance_ip::$INSTANCE_IP"
          echo "INSTANCE_IP=$INSTANCE_IP" >> $GITHUB_ENV
          echo ${{ env.INSTANCE_IP }}

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Get SSH Private Key
        id: ssh_private_key
        run: |
          SSH_PRIVATE_KEY=$(terraform show -json | jq -r '.values.root_module.resources[] | select(.type == "tls_private_key" and .name == "rsa_4096") | .values.private_key_pem')
          echo "${SSH_PRIVATE_KEY}" > ssh_private_key.pem
          chmod 600 ssh_private_key.pem
          echo "::set-output name=ssh_private_key::ssh_private_key.pem"
          echo "$SSH_PRIVATE_KEY"

      - name: Pull Docker Image from Docker Hub
        run: |
          ssh -o StrictHostKeyChecking=no -i ssh_private_key.pem ubuntu@${{ env.INSTANCE_IP }} '
            sudo docker pull arvindaffan/fppso:latest
          '

      - name: Delete old Docker Container
        run: |
          ssh -o StrictHostKeyChecking=no -i ssh_private_key.pem ubuntu@${{ env.INSTANCE_IP }} '
            sudo docker rm -f fppso-container || true
          '

      - name: Run Docker Container
        run: |
          ssh -o StrictHostKeyChecking=no -i ssh_private_key.pem ubuntu@${{ env.INSTANCE_IP }} '
            sudo docker run -d -p 3000:3000 --name fppso-container arvindaffan/fppso
          '


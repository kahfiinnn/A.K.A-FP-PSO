name: Node.js CI  # Nama dari workflow ini, yang akan muncul di tab Actions di GitHub

# Bagian ini mendefinisikan kapan workflow akan dijalankan
on:
  push:
    branches:
      - main  # Workflow akan dijalankan pada push ke branch 'main'
      - dev
  pull_request:
    branches:
      - main  # Workflow juga akan dijalankan pada pull request ke branch 'main'
      - dev

jobs:
  build:
    runs-on: ubuntu-latest  # Menentukan jenis mesin yang akan digunakan untuk menjalankan job ini; dalam hal ini, Ubuntu versi terbaru

    strategy:
      matrix:
        node-version: [20.x]  # Menentukan versi Node.js yang akan digunakan; di sini, hanya versi 20.x

    steps:
    - name: Checkout Repository  # Langkah pertama untuk mengambil kode dari repositori
      uses: actions/checkout@v4  # Menggunakan action resmi untuk checkout kode dari repositori

    - name: Setup Node.js ${{ matrix.node-version }}  # Langkah untuk mengatur Node.js sesuai versi yang ditentukan di atas
      uses: actions/setup-node@v3  # Menggunakan action resmi untuk mengatur Node.js
      with:
        node-version: ${{ matrix.node-version }}  # Menentukan versi Node.js yang diambil dari matriks strategi di atas
        cache: 'npm'  # Menggunakan cache untuk dependensi npm untuk mempercepat instalasi di masa depan

    - name: Install Dependencies  # Langkah untuk menginstal semua dependensi yang dibutuhkan proyek
      run: npm install  # Menjalankan 'npm install' untuk menginstal semua dependensi yang terdaftar di package.json

    - name: Run Tests  # Langkah untuk menjalankan tes
      if: contains(github.event.head_commit.message, '[run-tests]')  # Menjalankan tes hanya jika pesan commit mengandung '[run-tests]'
      run: npm test  # Menjalankan 'npm test' untuk menjalankan tes yang didefinisikan dalam package.json

    - name: Setup Environment Variables  # Langkah untuk mengatur variabel lingkungan yang dibutuhkan oleh aplikasi Anda
      # Menulis variabel lingkungan ke file .env dari secrets GitHub
      run: echo "MONGO_URL=${{ secrets.MONGO_URL }}\nPORT=${{ secrets.PORT }}" > .env

    - name: Build Docker Image
      run: docker build -t pso-chat-docker .

    - name: Run Docker Container
      run: docker run --name pso-chat-docker -d -p ${{ secrets.PORT }}:4000 pso-chat-docker

  testing:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout Repository  # Langkah pertama untuk mengambil kode dari repositori
      uses: actions/checkout@v4  # Menggunakan action resmi untuk checkout kode dari repositori

    - name: Setup Node.js ${{ matrix.node-version }}  # Langkah untuk mengatur Node.js sesuai versi yang ditentukan di atas
      uses: actions/setup-node@v3  # Menggunakan action resmi untuk mengatur Node.js
      with:
        node-version: ${{ matrix.node-version }}  # Menentukan versi Node.js yang diambil dari matriks strategi di atas
        cache: 'npm'  # Menggunakan cache untuk dependensi npm untuk mempercepat instalasi di masa depan

    - name: Install Dependencies  # Langkah untuk menginstal semua dependensi yang dibutuhkan proyek
      run: npm install  # Menjalankan 'npm install' untuk menginstal semua dependensi yang terdaftar di package.json

    - name: Run Tests  # Langkah untuk menjalankan tes
      if: contains(github.event.head_commit.message, '[run-tests]')  # Menjalankan tes hanya jika pesan commit mengandung '[run-tests]'
      run: npm test  # Menjalankan 'npm test' untuk menjalankan tes yang didefinisikan dalam package.json

    - name: Build Docker Image for Testing
      run: docker build -t pso-chat-docker-test .

    - name: Run Docker Container for Testing
      run: docker run --name pso-chat-docker-test -d -p ${{ secrets.PORT }}:4000 pso-chat-docker-test

    - name: Run Tests in Docker Container
      run: docker exec pso-chat-docker-test npm test

    - name: Stop and Remove Docker Container
      run: |
        docker stop pso-chat-docker-test
        docker rm pso-chat-docker-test

